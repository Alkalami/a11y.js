{"version":3,"sources":["a11y-state.js"],"names":[],"mappings":"CAAA,WAAA,OAAA,OAAA,OAAA,OAAA,YACA,SAAA,EAAA,EAAA,GACA,YAEA,IAAA,GAAA,WACA,GAAA,GAAA,IAKA,MAAA,kBAAA,EAKA,KAAA,QACA,MACA,MAAA,EACA,QACA,GACA,IAGA,SACA,MAAA,UACA,QACA,GACA,EACA,QACA,SAGA,UACA,MAAA,EACA,QACA,GACA,IAGA,UACA,MACA,SACA,WACA,OACA,UACA,cACA,YACA,UAEA,QACA,GACA,EACA,SAGA,SACA,MAAA,EACA,QACA,GACA,EACA,SAGA,QACA,MAAA,EACA,QACA,GACA,IAGA,SACA,MAAA,EACA,QACA,GACA,EACA,UACA,aAGA,SACA,MAAA,UACA,QACA,GACA,EACA,QACA,SAGA,UACA,MACA,WACA,SACA,MACA,OAEA,QACA,GACA,EACA,UAQA,KAAA,UACA,MAAA,SAAA,EAAA,GACA,MAAA,KAAA,OAAA,KAAA,EAAA,QAAA,QAAA,IACA,KAAA,GAAA,EAAA,kBACA,QAAA,MAAA,IAAA,EAAA,gCAGA,IAEA,GAGA,MAAA,SAAA,EAAA,EAAA,GACA,GAAA,EACA,OAAA,GAAA,SAAA,MAAA,IACA,EAAA,EAAA,OAAA,GAAA,MAEA,KAAA,EAAA,QAAA,IACA,KAAA,GAAA,EAAA,kBACA,QAAA,MAAA,IAAA,EAAA,oCAAA,EAAA,MAGA,IAEA,IAGA,IAQA,KAAA,IAAA,SAAA,EAAA,GACA,MAAA,GAAA,aAAA,QAAA,IAMA,KAAA,IAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,IAAA,EAAA,EACA,OAAA,QAAA,GACA,EACA,KAAA,GAAA,UAAA,GACA,GAEA,GAOA,KAAA,IAAA,SAAA,EAAA,EAAA,GACA,SAAA,EACA,GAAA,EAEA,EAAA,SAAA,MAAA,EAAA,KACA,EAAA,MAIA,OAAA,GACA,EAAA,aAAA,QAAA,EAAA,IAOA,KAAA,OAAA,SAAA,EAAA,GACA,GAAA,GAAA,EAAA,IAAA,EAAA,EACA,QAAA,GAAA,UAAA,EACA,EAAA,IAAA,EAAA,GAAA,GAEA,SAAA,EACA,EAAA,IAAA,EAAA,GAAA,GAEA,EAAA,kBACA,QAAA,KAAA,uBAAA,EAAA,oDAAA,EAAA,OAQA,KAAA,OAAA,SAAA,EAAA,GACA,EAAA,SAAA,MAAA,EAAA,QAAA,GACA,EAAA,gBAAA,QAAA,GAEA,EAAA,aAAA,QAAA,GAAA,IASA,GAAA,MACA,EAAA,MAAA,GAAA,GAKA,mBAAA,IAAA,EAAA,QACA,EAAA,QAAA,EACA,kBAAA,IAAA,EAAA,IACA,EAAA,WACA,MAAA,KAGA,OAAA,KAAA,GAEA,OAAA,KAAA,OAAA,OAAA,OAAA","file":"a11y.min.js","sourcesContent":["(function (a11y, module, define) {\n  'use strict';\n\n  var A11yState = function A11yState () {\n    var self = this;\n\n    //////////////////////////////\n    // Toggle for suppressing output\n    //////////////////////////////\n    this.suppressWarnings = false;\n\n    //////////////////////////////\n    // State Crosscheck\n    //////////////////////////////\n    this.states = {\n      'busy': {\n        'used': true,\n        'value': [\n          true,\n          false\n        ]\n      },\n      'checked': {\n        'used': ['option'],\n        'value': [\n          true,\n          false,\n          'mixed',\n          undefined\n        ]\n      },\n      'disabled': {\n        'used': true,\n        'value': [\n          true,\n          false\n        ]\n      },\n      'expanded': {\n        'used': [\n          'button',\n          'document',\n          'link',\n          'section',\n          'sectionhead',\n          'separator',\n          'window'\n        ],\n        'value': [\n          true,\n          false,\n          undefined\n        ]\n      },\n      'grabbed': {\n        'used': true,\n        'value': [\n          true,\n          false,\n          undefined\n        ]\n      },\n      'hidden': {\n        'used': true,\n        'value': [\n          true,\n          false\n        ]\n      },\n      'invalid': {\n        'used': true,\n        'value': [\n          true,\n          false,\n          'grammar',\n          'spelling'\n        ]\n      },\n      'pressed': {\n        'used': ['button'],\n        'value': [\n          true,\n          false,\n          'mixed',\n          undefined\n        ]\n      },\n      'selected': {\n        'used': [\n          'gridcell',\n          'option',\n          'row',\n          'tab'\n        ],\n        'value': [\n          true,\n          false,\n          undefined\n        ]\n      }\n    };\n\n    //////////////////////////////\n    // State Validation\n    //////////////////////////////\n    this.validate = {\n      'state': function (state, suppress) {\n        if (Object.keys(self.states).indexOf(state) === -1) {\n    if (suppress !== true && !self.suppressWarnings) {\n      console.error('`' + state + '` is not a valid ARIA state');\n          }\n\n          return false;\n        } else {\n          return true;\n        }\n      },\n      'value': function (state, value, suppress) {\n        var val;\n        if (self.validate.state(state)) {\n          val = self.states[state].value;\n\n          if (val.indexOf(value) === -1) {\n      if (suppress !== true && !self.suppressWarnings) {\n        console.error('`' + value + '` is not a valid value for `aria-' + state + '`');\n            }\n\n            return false;\n          } else {\n            return true;\n          }\n        } else {\n          return false;\n        }\n      }\n    };\n\n    //////////////////////////////\n    // Gets the current state of the ARIA attribute\n    //////////////////////////////\n    this.get = function (el, attr) {\n      return el.getAttribute('aria-' + attr);\n    };\n\n    //////////////////////////////\n    // Has the current ARIA state\n    //////////////////////////////\n    this.has = function (el, attr) {\n      var state = self.get(el, attr);\n      if (state === null) {\n        return false;\n      } else if (state === false || state === 'false') {\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    //////////////////////////////\n    // Sets the given state\n    //////////////////////////////\n    this.set = function (el, state, val) {\n      if (val === undefined) {\n        val = true;\n      } else {\n        if (!self.validate.value(state, val)) {\n          val = null;\n        }\n      }\n\n      if (val !== null) {\n        el.setAttribute('aria-' + state, val);\n      }\n    };\n\n    //////////////////////////////\n    // Toggles a given state\n    //////////////////////////////\n    this.toggle = function (el, state) {\n      var current = self.get(el, state);\n      if (current === null || current === 'false') {\n        self.set(el, state, true);\n      }\n      else if (current === 'true') {\n        self.set(el, state, false);\n      } else {\n        if (!self.suppressWarnings) {\n          console.info('Cannot toggle `aria-' + state + '` as it\\'s starting value is not a boolean (it\\'s `' + current + '`)');\n        }\n      }\n    };\n\n    //////////////////////////////\n    // Removes a given state\n    //////////////////////////////\n    this.remove = function (el, state) {\n      if (self.validate.value(state, undefined, true)) {\n        el.removeAttribute('aria-' + state);\n      } else {\n        el.setAttribute('aria-' + state, false);\n      }\n    };\n  };\n\n\n  //////////////////////////////\n  // We only ever want one instance of state\n  //////////////////////////////\n  a11y = a11y || {};\n  a11y.state = new A11yState();\n\n  //////////////////////////////\n  // All of the various exports!\n  //////////////////////////////\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = a11y;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return a11y;\n    });\n  } else {\n    window.a11y = a11y;\n  }\n}(window.a11y, window.module, window.define));\n"],"sourceRoot":"/source/"}